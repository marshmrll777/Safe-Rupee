import cv2
import numpy as np
import matplotlib.pyplot as plt
from skimage.metrics import structural_similarity as ssim
from tkinter import *
from tkinter import ttk
from PIL import Image, ImageTk
import tkinter.filedialog as tkFileDialog
import tkinter.messagebox as messagebox

# Global variables
option = -1
path = ""
selectedImage = False

# This function is called whenever a radio button is clicked
def currency_type():
    global option
    option = int(var.get())

# This function is called whenever the 'Select an image' button is clicked
def select_image():
    global canvas, path

    canvas.delete("all")
    path = tkFileDialog.askopenfilename()

    if len(path) > 0 and path.lower().endswith(('.jpeg', '.jpg', '.png')):
        image = cv2.imread(path)
        original_image = image.copy()

        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image = cv2.resize(image, (675, 300))

        image = Image.fromarray(image)
        image = ImageTk.PhotoImage(image)

        canvas.image = image
        canvas.create_image(0, 0, anchor=NW, image=image)
    else:
        messagebox.showinfo("Warning", "Please choose an image! (Supported formats: .jpeg, .jpg, .png)")

# Pre-processing
def preprocessing(image):
    resized_img = cv2.resize(image, (1167, 519))
    blur_img = cv2.GaussianBlur(resized_img, (5, 5), 0)
    gray_img = cv2.cvtColor(blur_img, cv2.COLOR_BGR2GRAY)
    return gray_img

# Feature detection using ORB
def computeORB(template_img, query_img):
    orb = cv2.ORB_create(nfeatures=700, scaleFactor=1.2, nlevels=8, edgeThreshold=15)
    kpts1, descs1 = orb.detectAndCompute(template_img, None)
    kpts2, descs2 = orb.detectAndCompute(query_img, None)
    bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
    matches = bf.match(descs1, descs2)
    dmatches = sorted(matches, key=lambda x: x.distance)
    src_pts = np.float32([kpts1[m.queryIdx].pt for m in dmatches]).reshape(-1, 1, 2)
    dst_pts = np.float32([kpts2[m.trainIdx].pt for m in dmatches]).reshape(-1, 1, 2)
    M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC, 5.0)
    h, w = template_img.shape[:2]
    pts = np.float32([[0, 0], [0, h-1], [w-1, h-1], [w-1, 0]]).reshape(-1, 1, 2)

    if M is not None:
        dst = cv2.perspectiveTransform(pts, M)
    else:
        dst = None

    return dst, dst_pts, kpts1, kpts2, dmatches

# Detect left and right bleed lines and number panel
def detect_features(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    edges = cv2.Canny(gray, 50, 150)
    contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    cv2.drawContours(image, contours, -1, (0, 255, 0), 3)
    return image

def submit():
    global option, path, selectedImage
    if len(path) <= 0:
        messagebox.showinfo("Warning", "Please choose an image!")
    elif option == -1:
        messagebox.showinfo("Warning", "Please choose the currency type!")
    else:
        print(path)
        print(option)
        selectedImage = True
        messagebox.showinfo("Info", "Image sent for processing!")

        image = cv2.imread(path)
        processed_image = preprocessing(image)
        plt.imshow(processed_image, 'gray')
        plt.title('Input image after pre-processing')
        plt.show()

        detected_image = detect_features(image)
        plt.imshow(cv2.cvtColor(detected_image, cv2.COLOR_BGR2RGB))
        plt.title('Detected features')
        plt.show()

        root.destroy()

# Exit window
def exit_window():
    root.destroy()

# Main function
root = Tk()
root.title("Fake Currency Detection System")
root.resizable(False, False)
window_height = 600
window_width = 1100
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()
x_cordinate = int((screen_width / 2) - (window_width / 2))
y_cordinate = int((screen_height / 2) - (window_height / 2))
root.geometry("{}x{}+{}+{}".format(window_width, window_height, x_cordinate, y_cordinate))

style = ttk.Style()
style.configure("TLabel", font=("Helvetica", 12))
style.configure("TButton", font=("Helvetica", 12), padding=6)
style.configure("TRadiobutton", font=("Helvetica", 12))

top_frame = Frame(root, bg='#1e3d59', width=1090, height=50, pady=3)
frame1 = Frame(root, bg='#f5f0e1', width=1090, height=80, padx=3, pady=3)
frame2 = Frame(root, bg='#f5f0e1', width=1090, height=400, pady=5, padx=5)
frame3 = Frame(root, bg='#f5f0e1', width=1090, height=50, pady=3)
frame4 = Frame(root, bg='#f5f0e1', width=1090, height=50, pady=3)
frame5 = Frame(root, bg='#1e3d59', width=1090, height=20, pady=3)

top_frame.grid(row=1, column=1, padx=5, pady=5)
frame1.grid(row=2, column=1, padx=5, pady=5)
frame2.grid(row=3, column=1, padx=5, pady=5)
frame3.grid(row=4, column=1, padx=5, pady=5)
frame4.grid(row=5, column=1, padx=5, pady=5)
frame5.grid(row=6, column=1, padx=5, pady=5)

title = Label(master=top_frame, text="FAKE CURRENCY DETECTION SYSTEM", fg='#f5f0e1', bg='#1e3d59', font="Verdana 22 bold")
title.pack()
text1 = Label(master=frame1, text="Select the currency type, browse your image file, and get started!", fg='black', bg='#f5f0e1', font="Verdana 12")
text1.pack()

canvas = Canvas(master=frame2, width=675, height=300, bg='white', highlightthickness=2, highlightbackground='#1e3d59')
canvas.pack()

currency_label = ttk.Label(master=frame3, text="Select currency type: ")
currency_label.pack(side='left', padx=5)

var = IntVar()
R1 = ttk.Radiobutton(master=frame3, text="500", variable=var, value=1, command=currency_type)
R1.pack(side='left', padx=10)
R2 = ttk.Radiobutton(master=frame3, text="2000", variable=var, value=2, command=currency_type)
R2.pack(side='left', padx=10)

btn1 = ttk.Button(master=frame4, text="Select an image", command=select_image)
btn1.pack(side='left', padx=10)
btn2 = ttk.Button(master=frame4, text="Submit", command=submit)
btn2.pack(side='left', padx=10)
btn3 = ttk.Button(master=frame4, text="Exit", command=exit_window)
btn3.pack(side='left', padx=10)

root.mainloop()
